	.title	NEODE2
	.mcall	.exit .print .setto
	.enabl	LC, AMA
	.list	MEB

@include p16mac.mac

	.asect
	.=1000


Start:	mov	#1000, SP			; just in case 
	call	GetAllMem			; get all memory (to USR)
	clr	@#177560			; clear keyboard status?
	call	VSyncInit			; set vsync process

	; vram clear
	mov	#Vram0, R0
	mov	#40000, R3
	clr	(R0)+
	sob	R3, .-2

	call	PaletteVm1Init

	call	InitBalls

;	call	DrawBorders
;	com	CurrentBuffer
;	call	DrawBorders
;	com	CurrentBuffer
	
;	call	SetAreaTas
	call	AreaInit
;	mov	AreaConfig+2, AreaConfig2+2	; must be same area# for both vline tables
	call	ViewInit

90$:	; wait for VSYNC
	tst	VsyCount
	beq	90$
	clr	VsyCount

	; switch memory buffer flag
	;com	CurrentBuffer

	mov	#FrameBufObj, FrameBufAddr
	; clear previous balls (in Vram1)
	call	ClearBalls
	; move balls
	call	MoveBalls
	; draw new balls (in Vram1)
	call	DrawBalls
	; move sprites from Vram1 to Vram0
	call	MoveFramebuffer

	; switch area
	; call	AreaInit

	; switch viewport
	;call	ViewInit

	; test for keypress
	tst	@#177560
	beq	90$
	mov	@#177562, R0

	call	AreaFree
	call	VSyncFree
	call	PaletteVm1Restore
	.exit


; //////////////////////////////////////////////
; // Vram
; //////////////////////////////////////////////

VramInit:
	mov	#127., R3			; skipped 1st line
10$:	mov	#32., R2			; 64 bytes line
20$:	mov	R4, (R0)+
	sob	R2, 20$
	mov	#32., R2			; 64 bytes line
30$:	mov	R5, (R0)+
	sob	R2, 30$
	sob	R3, 10$
	return


; //////////////////////////////////////////////
; // Vsync (fake)
; //////////////////////////////////////////////
BkwScrn:	.word	0
Bkw100:		.word	0
VsyCount:	.word	0

VsyncInit:
	mfhlt	#V.Scrn
	mov	R0, BkwScrn
	mov	#7126, R0
	mthlt	#V.Scrn
	mov	@#100, Bkw100
	mov	#VsyncProc, @#100
	return

VSyncFree:
	mov	Bkw100, @#100
	MOV	BkwScrn, R0
	mthlt	#V.Scrn
	return

VsyncProc:
	inc	VsyCount
	rti


; ///////////////////////////////////////////////////
; // Utils
; ///////////////////////////////////////////////////

MsgSettopFailed:	.asciz	"ERROR: Can't use all memory (.settop failed)"
MsgNoMemory:		.asciz	"ERROR: Can't allocate memory up to 120000"
	.even

GetAllMem:
	mov	@#54, R0			; addr of RMON
	mov	266(R0), R0			; addr of USR?
	tst	-(R0)				; -2 bytes
	.setto
	bcc	10$
	.print	#MsgSettopFailed
	.exit
10$:	cmp	R0, #120000
	bhis	20$
	.print	#MsgNoMemory
	.exit
20$:	return

; random with linear-feedback shift register (Galois)
; random -> R0
Random:	clc
	ror	(PC)+
Lfsr00:	.word	126341 		; 0ACE1
	bcc	Lfsr03
	mov	(PC)+, R0
Lfsr01:	.word	132000		; 0B400
	xor	R0, Lfsr00
Lfsr03:	mov	Lfsr00, R0
	return


; ///////////////////////////////////////////////////
; // Sprites
; ///////////////////////////////////////////////////

; draw 16x16 sprite (bis)
; R1 - X, R2 - Y, R0 - spr adr (4colors as in BK-0010)
DrawSprite:
	ash	#6., R2				; Y*64.
	mov	R1, R3				; X/8 * 2 (8 pixels in word)
	ash	#-3., R3
	asl	R3
	add	R3, R2				; R2 - vram offset
	add	#Vram1, R2			; Buffer 1
	mov	R2, @FrameBufAddr
	add	#2, FrameBufAddr
	bic	#^B1111111111111000, R1	
	asl	R1				; R1 - X%8 * 2 - ashc counter
	mov	#16., R3			; 16. lines 
20$:	; 1st word
	clr	R4
	mov	(R0)+, R5
	ashc	R1, R4				; R4:R5 << R1
	bis	R5, (R2)+
	bis	R4, (R2)
	; 2nd word
	clr	R4
	mov	(R0)+, R5
	ashc	R1, R4
	bis	R5, (R2)+
	bis	R4, (R2)
	; advance vaddr and cycle it
	add	#60., R2
	sob	R3, 20$
	return

BallSprite:
	.word	0, 0, 0, 0, 0, 0, 170000, 17
	.word	127400, 372, 125400, 352, 125300, 1652, 124300, 1652
	.word	121300, 1652, 124300, 1652, 121400, 352, 107400, 370
	.word	170000, 17, 0, 0, 0, 0, 0, 0  

BorderSprite:
	.word	125252, 125252, 146316, 106314, 31462, 131463, 146316, 106314
	.word	31462, 131463, 146316, 106314, 31462, 131463, 146316, 106314
	.word	31462, 131463, 146316, 106314, 31462, 131463, 146316, 106314
	.word	31462, 131463, 146316, 106314, 31462, 131463, 125252, 125252 

; clear sprite (16x16) in buffer
; R1 - X, R2 - Y
ClearSprite:
	ash	#6., R2				; Y*64.
	mov	R1, R3				; X/8 * 2 (8 pixels in word)
	ash	#-3., R3
	asl	R3
	add	R3, R2				; R2 - vram offset
	add	#Vram1, R2			; Buffer 1
	mov	R2, @FrameBufAddr
	add	#2, FrameBufAddr
	bic	#^B1111111111111000, R1		; fraction of X
	mov	#16., R3
20$:	; clear 3 words
	clr	(R2)+
	clr	(R2)+
	tst	R1
	beq	30$
	clr	(R2)
30$:	add	#60., R2
	sob	R3, 20$
	return

; move Vram1 to Vram0 by portions of cleared and draw..ed .. ah what a heck
MoveFramebuffer:
	mov	#FrameBufObj, R0
	mov	#BallCount*2, R1
	mov	#60., R2			; vaddr addition
10$:	mov	(R0)+, R4
	mov	R4, R5
	sub	#40000, R5
	mov	#16., R3
20$:	mov	(R4)+, (R5)+
	mov	(R4)+, (R5)+
	mov	(R4), (R5)
	add	R2, R4
	add	R2, R5
	sob	R3, 20$
	sob	R1, 10$
	return

DrawBorders:
	clr	varCount
	mov	#16., 101$+2
10$:	mov	varCount, R1
	clr	R2
	mov	#BorderSprite, R0
	call	DrawSprite
	mov	varCount, R1
	mov	#256.-16., R2
	mov	#BorderSprite, R0
	call	DrawSprite
	clr	R1
	mov	varCount, R2
	mov	#BorderSprite, R0
	call	DrawSprite
	mov	#256.-16., R1
	mov	varCount, R2
	mov	#BorderSprite, R0
	call	DrawSprite
	add	#16., varCount
101$:	dec	#000000
	bne	10$
	return

BallCount = 8.
BallObjects:
	.rept	BallCount
	.word	0				; X (fixed point, h-byte int part, l-byte fraction)
	.word	0				; Y
	.word	0				; angle
	.word	0				; velocity
	.endr

FrameBufAddr:	.word	0
FrameBufObj:
	; cleared ones
	.rept	BallCount
	.word	0				; starting vaddr offset
	.endr
	; drawed drawn dr.. wtf I forgot my english 
	.rept	BallCount
	.word	0
	.endr

DrawBalls:
	mov	#BallObjects, varAddr
	mov	#BallCount, 101$+2
10$:	mov	@varAddr, R1
	clrb	R1
	swab	R1
	add	#2., varAddr
	mov	@varAddr, R2
	clrb	R2
	swab	R2
	add	#6., varAddr
	mov	#BallSprite, R0
	call	DrawSprite
101$:	dec	#000000
	bne	10$
	return

ClearBalls:
	mov	#BallObjects, varAddr
	mov	#BallCount, 101$+2
10$:	mov	@varAddr, R1
	clrb	R1
	swab	R1
	add	#2., varAddr
	mov	@varAddr, R2
	clrb	R2
	swab	R2
	add	#6., varAddr
	mov	#BallSprite, R0
	call	ClearSprite
101$:	dec	#000000
	bne	10$
	return

InitBalls:
	mov	#BallObjects, varAddr
	mov	#BallCount, 101$+2
10$:	call	Random				; get X
	clrb	R0
	call	CorrectBallBoundary
	mov	R0, @varAddr
	add	#2, varAddr
	call	Random				; get Y
	clrb	R0
	call	CorrectBallBoundary
	mov	R0, @varAddr
	add	#2, varAddr
	call	Random
	bic	#^B1111111110000000, R0		; angle is 0..127
	mov	R0, @varAddr
	add	#2, varAddr
	call	Random
	bic	#^B1111111111111100, R0		; velocity 2..
	inc	R0
	inc	R0
	mov	R0, @varAddr
	add	#2, varAddr
101$:	dec	#000000
	bne	10$
	return

CorrectBallBoundary:
	cmp	R0, #16.*256.
	bhis	10$
	mov	#16.*256., R0
	return
10$:	cmp	R0, #256.-16.-16.*256.
	blos	20$
	mov	#256.-16.-16.*256., R0
20$:	return


; ///////////////////////////////////////////////////////////////
; // Movement
; ///////////////////////////////////////////////////////////////

; movements by angle 0..127 (in float), dx, dy
TBALPH:	.WORD	64.,0., 63.,3., 63.,6., 63.,9., 62.,12., 62.,15., 61.,18., 60.,21., 59.,24.
	.WORD	57.,27., 56.,30., 54.,32., 53.,35., 51.,38., 49.,40., 47.,42., 45.,45., 42.,47.
	.WORD	40.,49., 38.,51., 35.,53., 32.,54., 30.,56., 27.,57., 24.,59., 21.,60., 18.,61.
	.WORD	15.,62., 12.,62., 9.,63., 6.,63., 3.,63., 0.,64., -3.,63., -6.,63., -9.,63.
	.WORD	-12.,62., -15.,62., -18.,61., -21.,60., -24.,59., -27.,57., -30.,56., -32.,54., -35.,53.
	.WORD	-38.,51., -40.,49., -42.,47., -45.,45., -47.,42., -49.,40., -51.,38., -53.,35., -54.,32.
	.WORD	-56.,30., -57.,27., -59.,24., -60.,21., -61.,18., -62.,15., -62.,12., -63.,9., -63.,6.
	.WORD	-63.,3., -64.,0., -63.,-3., -63.,-6., -63.,-9., -62.,-12., -62.,-15., -61.,-18., -60.,-21.
	.WORD	-59.,-24., -57.,-27., -56.,-30., -54.,-32., -53.,-35., -51.,-38., -49.,-40., -47.,-42., -45.,-45.
	.WORD	-42.,-47., -40.,-49., -38.,-51., -35.,-53., -32.,-54., -30.,-56., -27.,-57., -24.,-59., -21.,-60.
	.WORD	-18.,-61., -15.,-62., -12.,-62., -9.,-63., -6.,-63., -3.,-63., 0.,-64., 3.,-63., 6.,-63.
	.WORD	9.,-63., 12.,-62., 15.,-62., 18.,-61., 21.,-60., 24.,-59., 27.,-57., 30.,-56., 32.,-54.
	.WORD	35.,-53., 38.,-51., 40.,-49., 42.,-47., 45.,-45., 47.,-42., 49.,-40., 51.,-38., 53.,-35.
	.WORD	54.,-32., 56.,-30., 57.,-27., 59.,-24., 60.,-21., 61.,-18., 62.,-15., 62.,-12., 63.,-9.
	.WORD	63.,-6., 63.,-3. 

; movement summary
Movement:
	call	TSTANG				; check angle
	call	MOVT01				; move by angle
	call	CLRNOR				;
	call	MOVT02				; walls normals
	call	ANGCOR				; correct them
	call	CLRNOR				;
;	call	MOVT03				; field bricks normals
;	call	ANGCOR				; correct them
	return
 
MoveBalls:
	mov	#BallObjects, varAddr
	mov	#BallCount, 101$+2
10$:	mov	varAddr, R0
	mov	(R0)+, OBJECX
	mov	(R0)+, OBJECY
	mov	(R0)+, ANGLE0
	mov	(R0)+, VELOCI
	mov	R0, -(SP)
	call	Movement
	mov	(SP)+, R0
	mov	VELOCI, -(R0)
	mov	ANGLE0, -(R0)
	mov	OBJECY, -(R0)
	mov	OBJECX, -(R0)
	add	#8., varAddr
101$:	dec	#000000
	bne	10$
	return

TSTCDN:	.word	0
TSTCRH:	.word	0
TSTCUP:	.word	0
TSTCLF:	.word	0

ANGLE0:	.word	0
VELOCI:	.word	0
OBJECX:	.word	0
OBJECY:	.word	0
TEMPX:	.word	0
TEMPY:	.word	0

NORKUB:	.word	0
NORMAL:	.word	0
NORTYP:	.word	0


; check where we are going (check angle)
TSTANG:	clr	TSTCDN
	clr	TSTCRH
	clr	TSTCUP
	clr	TSTCLF
	; moving down
	tst	ANGLE0
	beq	10$
	cmp	ANGLE0, #64.
	bhis	10$
	inc	TSTCDN
10$:	; moving right
	cmp	ANGLE0, #96.
	blos	11$
	inc	TSTCRH
11$:	cmp	ANGLE0, #32.
	bhis	12$
	inc	TSTCRH
12$:	; moving up
	cmp	ANGLE0, #64.
	blos	13$
	inc	TSTCUP
13$:	; moving left
	cmp	ANGLE0, #32.
	blos	14$
	cmp	ANGLE0, #96.
	bhis	14$
	inc	TSTCLF
14$:	return 

; movement 01 - move by angle & velocity
; -> TEMPX, TEMPY - coords (not float)
MOVT01:	mov	ANGLE0, R0
	asl	R0
	asl	R0
	mov	TBALPH(R0), R1
	inc	R0
	inc	R0
	mov	TBALPH(R0), R2
	mov	VELOCI, R3
1$:	add	R1, OBJECX
	add	R2, OBJECY
	sob	R3, 1$
	mov	OBJECX, R1
	clrb	R1
	swab	R1
	mov	R1, TEMPX
	mov	OBJECY, R2
	clrb	R2
	swab	R2
	mov	R2, TEMPY
	return 

; movement 02 - add wall's normals
MOVT02:	mov	TEMPX, R1
	mov	TEMPY, R2
	; going right ?
	tst	TSTCRH
	beq	20$
	cmp	R1, #256.-16.-16.
	blo	20$
	mov	#64., R0	; <- (left) normal angle
	call	ADDNR0		; add collision normal
20$:	; going up ?
	tst	TSTCUP		; testing top wall
	beq	30$
	cmp	R2, #16.
	bhi	30$
	mov	#32., R0	; (down) normal angle
	call	ADDNR0
30$:	; going down ?
	tst	TSTCDN		; testing bottom wall
	beq	40$
	cmp	R2, #256.-16.-16.
	blo	40$
	mov	#96., R0	; (up) normal angle
	call	ADDNR0
40$:	; going left ?
	tst	TSTCLF		; testing left wall
	beq	50$
	cmp	R1, #16.
	bhi	50$
	mov	#0., R0		; -> (right) normal angle
	call	ADDNR0
50$:	return 

; clear normals table (4 x 3 words)
CLRNOR:	clr	NORKUB
	clr	NORMAL
	clr	NORTYP
	return 

; add normal with zero background element, R0 - normal angle
; don't change R1, R2
ADDNR0:	mov	#1, NORTYP
	mov	R0, NORMAL
	clr	NORKUB
	return 

; correcting ANGLE0 from NORMAL
ANGCOR:	tst	NORTYP
	bne	.+4
	return
	mov	NORMAL, R1
	mov	ANGLE0, R0	; reverting angle
	add	#64., R0
	call	ANGFIX
	asl	R1
	sub	R0, R1
	mov	R1, R0
	call	ANGFIX
	mov	R0, ANGLE0
	return 

ANGFIX:	cmp	R0, #128.
	blt	1$
	sub	#128., R0
	br	ANGFIX
1$:	cmp	R0, #0
	bge	2$
	add	#128., R0
	br	1$
2$:	return 


; ///////////////////////////////////////////////////
; // Window 
; ///////////////////////////////////////////////////

; sets memory register in TAS area table for 4k bytes
; R0 - memory register, R1 - TAS addr (from memory register addr)
SetAreaTas4k:
	bic	#^B1100000000001111, R0		; just in case
	mov	#^B0011111111110000, R2		; memory register mask for TAS
	mov	#64., R3			; 64. lines are using 4k of memory
10$:	bic	R2, (R1)
	bis	R0, (R1)+
	tst	(R1)+
	sob	R3, 10$
	return	

SetAreaTas:
	; 1st TAS
	mov	@#ur1, R0
	mov	#0*64.*4.+AreaConfig+10., R1
	call	SetAreaTas4k
	mov	@#ur1, R0
	bis	#^B10000, R0
	mov	#1*64.*4.+AreaConfig+10., R1
	call	SetAreaTas4k
	mov	@#ur2, R0
	mov	#2*64.*4.+AreaConfig+10., R1
	call	SetAreaTas4k
	mov	@#ur2, R0
	bis	#^B10000, R0
	mov	#3*64.*4.+AreaConfig+10., R1
	call	SetAreaTas4k
	; 2nd TAS
	mov	@#ur3, R0
	mov	#0*64.*4.+AreaConfig2+10., R1
	call	SetAreaTas4k
	mov	@#ur3, R0
	bis	#^B10000, R0
	mov	#1*64.*4.+AreaConfig2+10., R1
	call	SetAreaTas4k
	mov	@#ur4, R0
	mov	#2*64.*4.+AreaConfig2+10., R1
	call	SetAreaTas4k
	mov	@#ur4, R0
	bis	#^B10000, R0
	mov	#3*64.*4.+AreaConfig2+10., R1
	call	SetAreaTas4k
	return

AreaInit:
	; create or modify area
;	tst	CurrentBuffer
;	beq	10$
;	mov	#AreaConfig2, @#177530
;	nop
;	return
10$:	mov	#AreaConfig, @#177530		; create area
	nop
	return

ViewInit:
	; create view
	mov	AreaConfig+2, ViewConfig+4	; put created area# to view config
;	clr	ViewConfig+6
;	tst	CurrentBuffer
;	beq	10$
;	mov	#256., ViewConfig+6
10$:	mov	#ViewConfig, @#177530		; create or modify view
	nop
	return

AreaFree:
	; kill area
	mov	#2, AreaConfig			; 2 - ARKILL, command "free area"
	mov	#AreaConfig, @#177530		; free area and its view
	nop
	return

PaletteVm1Init:
	; 25 = PLSAVx save palette
	; 23 = PLMODx modify palette
	; trying to make 'active view' badges be black-colored (they are not needed in full-screen app)
	mov	#25, SaveVm1Palette		; .. just in case
	mov	#SaveVm1Palette, @#177530	; save vm1 #0 palette
	nop
	movb	SaveVm1Palette+4.+15., OldVm1N15Color+1	; high byte
	movb	SaveVm1Palette+4.+31., OldVm1N15Color+0	; low byte
	; modify it
	clrb	SaveVm1Palette+4.+15.		; clear them to black color
	clrb	SaveVm1Palette+4.+31.
	mov	#23, SaveVm1Palette		; 23 - modify vm1 #0 palette
	mov	#SaveVm1Palette, @#177530
	nop	 
	return

PaletteVm1Restore:
	movb	OldVm1N15Color+1, SaveVm1Palette+4.+15.
	movb	OldVm1N15Color+0, SaveVm1Palette+4.+31.
	mov	#23, SaveVm1Palette		; modify vm1 #0 palette
	mov	#SaveVm1Palette, @#177530
	nop 
	return

OldVm1N15Color:	.word	0			; old #15 color to save it and restore after exit from program
SaveVm1Palette:	.word	25			; 25 - save palette
		.byte	0			; 1-bit for pixel
		.byte	0			; palette #0
		.blkw	16.			; 32 bytes of palette 

AreaConfig:	.word	46			; 46 - ARCRE create and register area
		.word	Vram0			; vddr
		.word	512.			; dY (lines)
		.word	64.			; dX (bytes per line)
		.byte	1			; 4 colors
		.byte	0			; palette #0 


; screen buffer (so called "area") description
AreaConfig1:	.word	0			; 0 - command "create and register area with TAS"
		.word	0			; 0 - register area (!0 - modify area)
		.word	256.			; dY (lines)
		.word	64.			; dX (bytes per line)
		; here are TAS 2-words per line: [Vaddr] [XXYYYYYYYYYYNVVV] N-not used, XX-palette#, VVV-video mode, YYYY..-memory manager register
		.word	0,40001, 100,40001, 200,40001, 300,40001, 400,40001, 500,40001, 600,40001, 700,40001, 1000,40001, 1100,40001, 1200,40001, 1300,40001, 1400,40001, 1500,40001, 1600,40001, 1700,40001
		.word	2000,40001, 2100,40001, 2200,40001, 2300,40001, 2400,40001, 2500,40001, 2600,40001, 2700,40001, 3000,40001, 3100,40001, 3200,40001, 3300,40001, 3400,40001, 3500,40001, 3600,40001, 3700,40001
		.word	4000,40001, 4100,40001, 4200,40001, 4300,40001, 4400,40001, 4500,40001, 4600,40001, 4700,40001, 5000,40001, 5100,40001, 5200,40001, 5300,40001, 5400,40001, 5500,40001, 5600,40001, 5700,40001
		.word	6000,40001, 6100,40001, 6200,40001, 6300,40001, 6400,40001, 6500,40001, 6600,40001, 6700,40001, 7000,40001, 7100,40001, 7200,40001, 7300,40001, 7400,40001, 7500,40001, 7600,40001, 7700,40001
		.word	10000,40001, 10100,40001, 10200,40001, 10300,40001, 10400,40001, 10500,40001, 10600,40001, 10700,40001, 11000,40001, 11100,40001, 11200,40001, 11300,40001, 11400,40001, 11500,40001, 11600,40001, 11700,40001
		.word	12000,40001, 12100,40001, 12200,40001, 12300,40001, 12400,40001, 12500,40001, 12600,40001, 12700,40001, 13000,40001, 13100,40001, 13200,40001, 13300,40001, 13400,40001, 13500,40001, 13600,40001, 13700,40001
		.word	14000,40001, 14100,40001, 14200,40001, 14300,40001, 14400,40001, 14500,40001, 14600,40001, 14700,40001, 15000,40001, 15100,40001, 15200,40001, 15300,40001, 15400,40001, 15500,40001, 15600,40001, 15700,40001
		.word	16000,40001, 16100,40001, 16200,40001, 16300,40001, 16400,40001, 16500,40001, 16600,40001, 16700,40001, 17000,40001, 17100,40001, 17200,40001, 17300,40001, 17400,40001, 17500,40001, 17600,40001, 17700,40001
		.word	20000,40001, 20100,40001, 20200,40001, 20300,40001, 20400,40001, 20500,40001, 20600,40001, 20700,40001, 21000,40001, 21100,40001, 21200,40001, 21300,40001, 21400,40001, 21500,40001, 21600,40001, 21700,40001
		.word	22000,40001, 22100,40001, 22200,40001, 22300,40001, 22400,40001, 22500,40001, 22600,40001, 22700,40001, 23000,40001, 23100,40001, 23200,40001, 23300,40001, 23400,40001, 23500,40001, 23600,40001, 23700,40001
		.word	24000,40001, 24100,40001, 24200,40001, 24300,40001, 24400,40001, 24500,40001, 24600,40001, 24700,40001, 25000,40001, 25100,40001, 25200,40001, 25300,40001, 25400,40001, 25500,40001, 25600,40001, 25700,40001
		.word	26000,40001, 26100,40001, 26200,40001, 26300,40001, 26400,40001, 26500,40001, 26600,40001, 26700,40001, 27000,40001, 27100,40001, 27200,40001, 27300,40001, 27400,40001, 27500,40001, 27600,40001, 27700,40001
		.word	30000,40001, 30100,40001, 30200,40001, 30300,40001, 30400,40001, 30500,40001, 30600,40001, 30700,40001, 31000,40001, 31100,40001, 31200,40001, 31300,40001, 31400,40001, 31500,40001, 31600,40001, 31700,40001
		.word	32000,40001, 32100,40001, 32200,40001, 32300,40001, 32400,40001, 32500,40001, 32600,40001, 32700,40001, 33000,40001, 33100,40001, 33200,40001, 33300,40001, 33400,40001, 33500,40001, 33600,40001, 33700,40001
		.word	34000,40001, 34100,40001, 34200,40001, 34300,40001, 34400,40001, 34500,40001, 34600,40001, 34700,40001, 35000,40001, 35100,40001, 35200,40001, 35300,40001, 35400,40001, 35500,40001, 35600,40001, 35700,40001
		.word	36000,40001, 36100,40001, 36200,40001, 36300,40001, 36400,40001, 36500,40001, 36600,40001, 36700,40001, 37000,40001, 37100,40001, 37200,40001, 37300,40001, 37400,40001, 37500,40001, 37600,40001, 37700,40001 

; copy of above
AreaConfig2:	.word	0
		.word	0
		.word	256.
		.word	64.
		.word	0,40001, 100,40001, 200,40001, 300,40001, 400,40001, 500,40001, 600,40001, 700,40001, 1000,40001, 1100,40001, 1200,40001, 1300,40001, 1400,40001, 1500,40001, 1600,40001, 1700,40001
		.word	2000,40001, 2100,40001, 2200,40001, 2300,40001, 2400,40001, 2500,40001, 2600,40001, 2700,40001, 3000,40001, 3100,40001, 3200,40001, 3300,40001, 3400,40001, 3500,40001, 3600,40001, 3700,40001
		.word	4000,40001, 4100,40001, 4200,40001, 4300,40001, 4400,40001, 4500,40001, 4600,40001, 4700,40001, 5000,40001, 5100,40001, 5200,40001, 5300,40001, 5400,40001, 5500,40001, 5600,40001, 5700,40001
		.word	6000,40001, 6100,40001, 6200,40001, 6300,40001, 6400,40001, 6500,40001, 6600,40001, 6700,40001, 7000,40001, 7100,40001, 7200,40001, 7300,40001, 7400,40001, 7500,40001, 7600,40001, 7700,40001
		.word	10000,40001, 10100,40001, 10200,40001, 10300,40001, 10400,40001, 10500,40001, 10600,40001, 10700,40001, 11000,40001, 11100,40001, 11200,40001, 11300,40001, 11400,40001, 11500,40001, 11600,40001, 11700,40001
		.word	12000,40001, 12100,40001, 12200,40001, 12300,40001, 12400,40001, 12500,40001, 12600,40001, 12700,40001, 13000,40001, 13100,40001, 13200,40001, 13300,40001, 13400,40001, 13500,40001, 13600,40001, 13700,40001
		.word	14000,40001, 14100,40001, 14200,40001, 14300,40001, 14400,40001, 14500,40001, 14600,40001, 14700,40001, 15000,40001, 15100,40001, 15200,40001, 15300,40001, 15400,40001, 15500,40001, 15600,40001, 15700,40001
		.word	16000,40001, 16100,40001, 16200,40001, 16300,40001, 16400,40001, 16500,40001, 16600,40001, 16700,40001, 17000,40001, 17100,40001, 17200,40001, 17300,40001, 17400,40001, 17500,40001, 17600,40001, 17700,40001
		.word	20000,40001, 20100,40001, 20200,40001, 20300,40001, 20400,40001, 20500,40001, 20600,40001, 20700,40001, 21000,40001, 21100,40001, 21200,40001, 21300,40001, 21400,40001, 21500,40001, 21600,40001, 21700,40001
		.word	22000,40001, 22100,40001, 22200,40001, 22300,40001, 22400,40001, 22500,40001, 22600,40001, 22700,40001, 23000,40001, 23100,40001, 23200,40001, 23300,40001, 23400,40001, 23500,40001, 23600,40001, 23700,40001
		.word	24000,40001, 24100,40001, 24200,40001, 24300,40001, 24400,40001, 24500,40001, 24600,40001, 24700,40001, 25000,40001, 25100,40001, 25200,40001, 25300,40001, 25400,40001, 25500,40001, 25600,40001, 25700,40001
		.word	26000,40001, 26100,40001, 26200,40001, 26300,40001, 26400,40001, 26500,40001, 26600,40001, 26700,40001, 27000,40001, 27100,40001, 27200,40001, 27300,40001, 27400,40001, 27500,40001, 27600,40001, 27700,40001
		.word	30000,40001, 30100,40001, 30200,40001, 30300,40001, 30400,40001, 30500,40001, 30600,40001, 30700,40001, 31000,40001, 31100,40001, 31200,40001, 31300,40001, 31400,40001, 31500,40001, 31600,40001, 31700,40001
		.word	32000,40001, 32100,40001, 32200,40001, 32300,40001, 32400,40001, 32500,40001, 32600,40001, 32700,40001, 33000,40001, 33100,40001, 33200,40001, 33300,40001, 33400,40001, 33500,40001, 33600,40001, 33700,40001
		.word	34000,40001, 34100,40001, 34200,40001, 34300,40001, 34400,40001, 34500,40001, 34600,40001, 34700,40001, 35000,40001, 35100,40001, 35200,40001, 35300,40001, 35400,40001, 35500,40001, 35600,40001, 35700,40001
		.word	36000,40001, 36100,40001, 36200,40001, 36300,40001, 36400,40001, 36500,40001, 36600,40001, 36700,40001, 37000,40001, 37100,40001, 37200,40001, 37300,40001, 37400,40001, 37500,40001, 37600,40001, 37700,40001 

; window (so called "view") description
ViewConfig:	.word	4			; 4 - command "create view"
		.word	0			; view id
		.word	0			; area id
		.word	0			; vertical content offset
		.word	0			; horisontal content offset
		; these four words will be anyway corrected by window manager program
		.word	22.			; top position (row)
		.word	255.+22.		; bottom position (row)
		.word	1.			; left position (column, 32-pix)
		.word	25.			; right position (column)
		.byte	1,2			; scale x,y (0 = *4, 1 = *2, 2 = *1)


; //////////////////////////////////////////////////////////////////////////////
; // DATA
; //////////////////////////////////////////////////////////////////////////////

CurrentBuffer:	.word	0
varAddr:	.word	0
varCount:	.word	0

Vram0 = 20000
Vram1 = Vram0 + 40000

	.end	Start
